// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoobGGApp.Infrastructure.Persistence.EntityFramework.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NoobGGApp.Infrastructure.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.HasKey("Id")
                        .HasName("pk_customer");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 6, 9, 14, 40, 58, 612, DateTimeKind.Unspecified).AddTicks(883), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("image_url");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_games");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.GameMode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_team_size");

                    b.Property<int>("MinTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("min_team_size");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_mode");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_mode_game_id");

                    b.ToTable("game_mode", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.GameRank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.HasKey("Id")
                        .HasName("pk_game_rank");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_rank_game_id");

                    b.ToTable("game_rank", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.GameRegion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2025, 6, 9, 14, 40, 58, 612, DateTimeKind.Unspecified).AddTicks(2972), new TimeSpan(0, 0, 0, 0, 0)))
                        .HasColumnName("created_on");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_regions");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_regions_game_id");

                    b.ToTable("game_regions", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_language");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Lobby", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<long>("CreatorId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_id");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<long>("GameModeId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_mode_id");

                    b.Property<long>("GameRegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_region_id");

                    b.Property<bool>("IsMicrophoneRequired")
                        .HasColumnType("boolean")
                        .HasColumnName("is_microphone_required");

                    b.Property<long?>("MaxGameRankId")
                        .HasColumnType("bigint")
                        .HasColumnName("max_game_rank_id");

                    b.Property<int>("MaxTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("max_team_size");

                    b.Property<long?>("MinGameRankId")
                        .HasColumnType("bigint")
                        .HasColumnName("min_game_rank_id");

                    b.Property<int>("MinTeamSize")
                        .HasColumnType("integer")
                        .HasColumnName("min_team_size");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_lobby");

                    b.HasIndex("CreatorId")
                        .HasDatabaseName("ix_lobby_creator_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_lobby_game_id");

                    b.HasIndex("GameModeId")
                        .HasDatabaseName("ix_lobby_game_mode_id");

                    b.HasIndex("GameRegionId")
                        .HasDatabaseName("ix_lobby_game_region_id");

                    b.HasIndex("MaxGameRankId")
                        .HasDatabaseName("ix_lobby_max_game_rank_id");

                    b.HasIndex("MinGameRankId")
                        .HasDatabaseName("ix_lobby_min_game_rank_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_lobby_owner_id");

                    b.ToTable("lobby", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.LobbyEventHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<int>("EventType")
                        .HasColumnType("integer")
                        .HasColumnName("event_type");

                    b.Property<long>("LobbyId")
                        .HasColumnType("bigint")
                        .HasColumnName("lobby_id");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_lobby_event_history");

                    b.HasIndex("LobbyId")
                        .HasDatabaseName("ix_lobby_event_history_lobby_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_lobby_event_history_user_id");

                    b.ToTable("lobby_event_history", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.LobbyLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint")
                        .HasColumnName("language_id");

                    b.Property<long>("LobbyId")
                        .HasColumnType("bigint")
                        .HasColumnName("lobby_id");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.HasKey("Id")
                        .HasName("pk_lobby_language");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("ix_lobby_language_language_id");

                    b.HasIndex("LobbyId")
                        .HasDatabaseName("ix_lobby_language_lobby_id");

                    b.ToTable("lobby_language", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.LobbyMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<long>("LobbyId")
                        .HasColumnType("bigint")
                        .HasColumnName("lobby_id");

                    b.Property<string>("ModifiedByUserId")
                        .HasColumnType("text")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<long>("SenderId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_id");

                    b.HasKey("Id")
                        .HasName("pk_lobby_message");

                    b.HasIndex("LobbyId")
                        .HasDatabaseName("ix_lobby_message_lobby_id");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("ix_lobby_message_sender_id");

                    b.ToTable("lobby_message", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_application_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("application_roles", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_application_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_role_claims_role_id");

                    b.ToTable("application_role_claims", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("CreatedByUserId")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("created_by_user_id");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("full_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("ModifiedByUserId")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("modified_by_user_id");

                    b.Property<DateTimeOffset?>("ModifiedOn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_on");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_application_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_application_users_email");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("application_users", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_application_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_claims_user_id");

                    b.ToTable("application_user_claims", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_application_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_application_user_logins_user_id");

                    b.ToTable("application_user_logins", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_application_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_application_user_roles_role_id");

                    b.ToTable("application_user_roles", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_application_user_tokens");

                    b.ToTable("application_user_tokens", (string)null);
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Customer", b =>
                {
                    b.OwnsOne("NoobGGApp.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("Apartment")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_apartment");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("city");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("country");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("state");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("street");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)")
                                .HasColumnName("zip_code");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customer_customer_id");
                        });

                    b.OwnsOne("NoobGGApp.Domain.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<long>("CustomerId")
                                .HasColumnType("bigint")
                                .HasColumnName("id");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("last_name");

                            b1.HasKey("CustomerId");

                            b1.ToTable("customer");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId")
                                .HasConstraintName("fk_customer_customer_id");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.GameMode", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Entities.Game", "Game")
                        .WithMany("GameModes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_mode_games_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.GameRank", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Entities.Game", "Game")
                        .WithMany("GameRanks")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_rank_games_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.GameRegion", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Entities.Game", "Game")
                        .WithMany("GameRegions")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_regions_games_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Lobby", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_application_users_creator_id");

                    b.HasOne("NoobGGApp.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_games_game_id");

                    b.HasOne("NoobGGApp.Domain.Entities.GameMode", "GameMode")
                        .WithMany()
                        .HasForeignKey("GameModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_game_mode_game_mode_id");

                    b.HasOne("NoobGGApp.Domain.Entities.GameRegion", "GameRegion")
                        .WithMany()
                        .HasForeignKey("GameRegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_game_regions_game_region_id");

                    b.HasOne("NoobGGApp.Domain.Entities.GameRank", "MaxGameRank")
                        .WithMany()
                        .HasForeignKey("MaxGameRankId")
                        .HasConstraintName("fk_lobby_game_rank_max_game_rank_id");

                    b.HasOne("NoobGGApp.Domain.Entities.GameRank", "MinGameRank")
                        .WithMany()
                        .HasForeignKey("MinGameRankId")
                        .HasConstraintName("fk_lobby_game_rank_min_game_rank_id");

                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_application_users_owner_id");

                    b.Navigation("Creator");

                    b.Navigation("Game");

                    b.Navigation("GameMode");

                    b.Navigation("GameRegion");

                    b.Navigation("MaxGameRank");

                    b.Navigation("MinGameRank");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.LobbyEventHistory", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Entities.Lobby", "Lobby")
                        .WithMany("LobbyEventHistories")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_event_history_lobby_lobby_id");

                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_lobby_event_history_application_users_user_id");

                    b.Navigation("Lobby");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.LobbyLanguage", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Entities.Language", "Language")
                        .WithMany("LobbyLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_language_language_language_id");

                    b.HasOne("NoobGGApp.Domain.Entities.Lobby", "Lobby")
                        .WithMany("LobbyLanguages")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_language_lobby_lobby_id");

                    b.Navigation("Language");

                    b.Navigation("Lobby");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.LobbyMessage", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Entities.Lobby", "Lobby")
                        .WithMany("LobbyMessages")
                        .HasForeignKey("LobbyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_message_lobby_lobby_id");

                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lobby_message_application_users_sender_id");

                    b.Navigation("Lobby");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationRoleClaim", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_role_claims_asp_net_roles_role_id");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserClaim", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_claims_asp_net_users_user_id");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserLogin", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_logins_application_users_user_id");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserRole", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_roles_role_id");

                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_roles_application_users_user_id");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Identity.ApplicationUserToken", b =>
                {
                    b.HasOne("NoobGGApp.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_application_user_tokens_application_users_user_id");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Game", b =>
                {
                    b.Navigation("GameModes");

                    b.Navigation("GameRanks");

                    b.Navigation("GameRegions");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Language", b =>
                {
                    b.Navigation("LobbyLanguages");
                });

            modelBuilder.Entity("NoobGGApp.Domain.Entities.Lobby", b =>
                {
                    b.Navigation("LobbyEventHistories");

                    b.Navigation("LobbyLanguages");

                    b.Navigation("LobbyMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
